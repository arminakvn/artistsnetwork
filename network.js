// Generated by CoffeeScript 1.7.1
(function() {
  var ArtistsNetwork;

  ArtistsNetwork = (function() {
    function ArtistsNetwork(text) {
      this.text = text;
    }

    ArtistsNetwork.prototype.options = {
      height: 800,
      width: 900,
      category: '',
      type: ''
    };

    ArtistsNetwork.prototype.properties = {
      f_id: '',
      height: 800,
      width: 900,
      _margin: {
        t: 20,
        l: 30,
        b: 30,
        r: 30
      }
    };

    ArtistsNetwork.prototype.initialize = function(data, options) {
      var _this;
      _this = this;
      L.setOptions(_this, options);
    };

    ArtistsNetwork.prototype.category = function(newCategory) {
      this.options.category = newCategory;
      return this;
    };

    ArtistsNetwork.prototype.type = function(newType) {
      this.options.type = newType;
      return this;
    };

    ArtistsNetwork.prototype.nodes = function() {
      var edges, nodes;
      nodes = [];
      edges = [];
      d3.json('http://localhost:3001/artists', (function(_this) {
        return function(error, node) {
          var each, _i, _j, _len, _len1, _results;
          for (_i = 0, _len = node.length; _i < _len; _i++) {
            each = node[_i];
            nodes.push({
              'name': each.source
            });
            edges.push({
              'source': each.source,
              target: each.target
            });
          }
          _results = [];
          for (_j = 0, _len1 = node.length; _j < _len1; _j++) {
            each = node[_j];
            _results.push(nodes.push({
              'name': each.target
            }));
          }
          return _results;
        };
      })(this));
      return this.nodes = nodes;
    };

    ArtistsNetwork.prototype.makeNetwork = function(artist, lineindex) {
      var edges, nodes;
      console.log("@options.width", this.options.width);
      console.log("arist in the make makeNetwork", artist, lineindex);
      nodes = [];
      edges = [];
      return d3.json('http://localhost:3001/artists', (function(_this) {
        return function(error, node) {
          var color, each, force, link, svg, _i, _j, _len, _len1;
          for (_i = 0, _len = node.length; _i < _len; _i++) {
            each = node[_i];
            nodes.push({
              'name': each.source
            });
            edges.push({
              'source': each.source,
              target: each.target
            });
          }
          for (_j = 0, _len1 = node.length; _j < _len1; _j++) {
            each = node[_j];
            nodes.push({
              'name': each.target
            });
          }
          console.log(nodes, edges);
          color = d3.scale.category20();
          force = d3.layout.force().charge(-120).linkDistance(30).size([_this.options.width / 2, _this.options.height / 2]);
          force.nodes(nodes).start();
          svg = d3.select('svg').attr("transform", "translate(" + _this.properties._margin.l + "," + _this.properties._margin.t + ")");
          if (_this.node !== void 0) {
            _this.node.data([]).exit();
            _this.node = svg.selectAll('.node').data(nodes).enter().append('circle').attr('class', 'node').attr('r', 5).style('fill', function(d, i) {
              if (d.name === artist.Name) {
                return 'black';
              } else {
                return 'none';
              }
            }).on("mouseenter", function(d, i) {
              return console.log("d", d);
            }).call(force.drag);
            console.log("node isnt undefined", node);
          } else {
            node = svg.selectAll('.node').data(nodes).enter().append('circle').attr('class', 'node').attr('r', 5).style('fill', function(d, i) {
              if (d.name === artist.Name) {
                return 'black';
              } else {
                return 'none';
              }
            }).on("mouseenter", function(d, i) {
              return console.log("d", d);
            }).call(force.drag);
          }
          force.links(edges);
          link = svg.selectAll('.link').data(edges).enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
            return Math.sqrt(1);
          });
          _this.node = node;
          return force.on('tick', function() {
            link.attr('x1', function(d) {
              return d.source.x;
            }).attr('y1', function(d) {
              return d.source.y;
            }).attr('x2', function(d) {
              return d.target.x;
            }).attr('y2', function(d) {
              return d.target.y;
            });
            return node.attr('cx', function(d) {
              return d.x;
            }).attr('cy', function(d) {
              return d.y;
            });
          });
        };
      })(this));
    };

    ArtistsNetwork.prototype.addNode = function(id) {
      var nodes;
      console.log(id);
      nodes = this.nodes;
      nodes.push({
        'id': id
      });
      this.update();
    };

    ArtistsNetwork.prototype.removeNode = function(id) {
      var i, index, links, n, nodes;
      links = this.links;
      i = 0;
      n = this.findNode(id);
      while (i < links.length) {
        if (links[i]['source'] === n || links[i]['target'] === n) {
          links.splice(i, 1);
        } else {
          i++;
        }
      }
      index = this.findNodeIndex(id);
      nodes = this.nodes;
      if (index !== void 0) {
        nodes.splice(index, 1);
        this.update();
      }
    };

    ArtistsNetwork.prototype.addLink = function(sourceId, targetId) {
      var links, sourceNode, targetNode;
      sourceNode = this.findNode(sourceId);
      targetNode = this.findNode(targetId);
      links = this.links;
      if (sourceNode !== void 0 && targetNode !== void 0) {
        links.push({
          'source': sourceNode,
          'target': targetNode
        });
        this.update();
      }
    };

    ArtistsNetwork.prototype.findNode = function(id) {
      var i, nodes;
      nodes = this.nodes;
      i = 0;
      while (i < nodes.length) {
        if (nodes[i].id === id) {
          return nodes[i];
        }
        i++;
      }
    };

    ArtistsNetwork.prototype.findNodeIndex = function(id) {
      var i, nodes;
      nodes = this.nodes;
      i = 0;
      while (i < nodes.length) {
        if (nodes[i].id === id) {
          return i;
        }
        i++;
      }
    };

    ArtistsNetwork.prototype.myGraph = function(el) {
      var elH, h, vis, w;
      elH = '#' + ("" + el);
      w = $(elH).innerWidth();
      h = $(elH).innerHeight();
      console.log("" + elH, d3.select("" + elH));
      console.log("myGraph el", el);
      vis = this.vis = d3.select("" + elH).append('svg:svg').attr('width', 400).attr('height', 400);
      this.force = d3.layout.force().gravity(.05).distance(100).charge(-100).size([w, h]);
      this.nodes = this.force.nodes();
      console.log("@nodes", this.nodes);
      this.links = this.force.links();
    };

    ArtistsNetwork.prototype.update = function() {
      var link, links, node, nodeEnter, nodes;
      links = this.links;
      link = this.vis.selectAll('line.link').data(links, function(d) {
        return d.source.id + '-' + d.target.id;
      });
      link.enter().insert('line').attr('class', 'link');
      link.exit().remove();
      nodes = this.nodes;
      node = this.vis.selectAll('g.node').data(nodes, function(d) {
        return d.id;
      });
      nodeEnter = node.enter().append('g').attr('class', 'node').call(this.force.drag);
      nodeEnter.append('circle').attr('r', 15).style('fill', 'black').attr('x', '-8px').attr('y', '-8px').attr('width', '16px').attr('height', '16px');
      nodeEnter.append('text').attr('class', 'nodetext').attr('dx', 12).attr('dy', '.35em').text(function(d) {
        return d.id;
      });
      node.exit().remove();
      this.force.on('tick', function() {
        console.log(d);
        link.attr('x1', function(d) {
          return d.source.x;
        }).attr('y1', function(d) {
          return d.source.y;
        }).attr('x2', function(d) {
          return d.target.x;
        }).attr('y2', function(d) {
          return d.target.y;
        });
        node.attr('transform', function(d) {
          return 'translate(' + d.x + ',' + d.y + ')';
        });
      });
      this.force.start();
    };

    ArtistsNetwork.prototype.visulize = function() {
      var Height, Width, svg;
      svg = d3.select('body').append('svg').attr('width', this.properties.width / 2).attr('height', this.properties.height / 2);
      console.log("inside visulize");
      Height = this.options.height;
      Width = this.options.width;
      this._textDomEl = document.createElement('div');
      console.log(this._textDomEl);
      $('body').append(this._textDomEl);
      $(this._textDomEl).attr("id", "ArtistsViz");
      this.myGraph("ArtistsViz");
      this._textDomObj = $(this._textDomEl).attr("id", "ArtistsViz");
      this._textDomObj.css('width', Width / 2);
      this._textDomObj.css('height', Height);
      this._textDomObj.css('background-color', 'white');
      this._textDomObj.css('overflow', 'visibile');
      console.log("@text", this.text);
      this._d3text = d3.select(this._textDomEl).append('div').attr("width", this.properties.width + this.properties._margin.l + this.properties._margin.r).attr("height", this.properties.height + this.properties._margin.t + this.properties._margin.b).attr("transform", "translate(" + this.properties._margin.l + "," + this.properties._margin.t + ")").append("ul").style("list-style-type", "none").style("padding-left", "0px").attr("width", Width / 3).attr("height", Height - 80);
      this._d3li = this._d3text.selectAll("li").data(this.text).enter().append("li");
      this._d3li.style("font-family", "Helvetica").style("line-height", "2").style("border", "0px solid gray").style("margin-top", "15px").style("padding-top", "15px").style("padding-bottom", "15px").style("padding-right", "20px").style("padding-left", "40px").attr("id", (function(_this) {
        return function(d, i) {
          return "line-" + i;
        };
      })(this)).text((function(_this) {
        return function(d, i) {
          return d.FirstParagraph;
        };
      })(this)).style("font-size", "12px").style("color", "rgb(72,72,72)").on("mouseover", function(d, i) {
        console.log(this, this);
        $(this).css('cursor', 'pointer');
        d3.select(this).transition().duration(0).style("color", "black").style("background-color", "rgb(208,208,208) ").style("opacity", 1);
      }).on("mouseenter", (function(_this) {
        return function(d, i) {
          var id;
          console.log("@stttttttt", _this);
          id = "line-" + i;
          _this.addNode(d);
          return _this.addLink(1, 1);
        };
      })(this)).on("mouseout", function(d, i) {
        d3.select(this).transition().duration(1000).style("color", "rgb(72,72,72)").style("background-color", "white").style("opacity", 1);
      }).transition().duration(1).delay(1).style("opacity", 1);
      console.log(this._d3text);
      return this._textDomEl;
    };

    return ArtistsNetwork;

  })();

  d3.json('http://localhost:3001/bios', function(error, text) {
    var artistsList;
    console.log("text", text);
    return artistsList = new ArtistsNetwork(text).visulize();
  });

  ({
    d3force: function() {
      var draw, drawLinks, edges, findSourceIndex, findTargetIndex, getEdge, nodeToEdge, nodes;
      nodes = [];
      nodeToEdge = [];
      edges = [];
      d3.json('http://localhost:3001/artists', function(error, node) {
        var each, _i, _j, _len, _len1;
        for (_i = 0, _len = node.length; _i < _len; _i++) {
          each = node[_i];
          nodes.push({
            'name': each.source
          });
          edges.push({
            'source': each.source,
            target: each.target
          });
        }
        for (_j = 0, _len1 = node.length; _j < _len1; _j++) {
          each = node[_j];
          nodes.push({
            'name': each.target
          });
        }
        return draw(nodes, edges);
      });
      getEdge = function(nodes) {
        return d3.json('http://localhost:3001/armoryedges', function(error, edge) {
          return console.log("nodes", nodes);
        });
      };
      draw = function(nodes, edge) {
        var color, count, force, height, link, node, svg, width;
        width = 960;
        height = 500;
        svg = d3.select('body').append('svg').attr('width', width).attr('height', height);
        color = d3.scale.category20();
        force = d3.layout.force().charge(-120).linkDistance(30).size([width, height]);
        count = 0;
        console.log(nodes.length);
        console.log(edges.length);
        force.nodes(nodes);
        console.log(nodes);
        console.log(edges);
        force.linkStrength(0.1).links(edges).start();
        node = svg.selectAll('.node').data(nodes).enter().append('circle').attr('class', 'node').attr('r', 5).style('fill', 'black').call(force.drag);
        force.tick();
        link = svg.selectAll('.link').data(edges).enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
          return Math.sqrt(1);
        });
        return force.on('tick', function() {
          link.attr('x1', function(d) {
            return d.source.x;
          }).attr('y1', function(d) {
            return d.source.y;
          }).attr('x2', function(d) {
            return d.target.x;
          }).attr('y2', function(d) {
            return d.target.y;
          });
          return node.attr('cx', function(d) {
            return d.x;
          }).attr('cy', function(d) {
            return d.y;
          });
        });
      };
      findSourceIndex = function(each, nodes, count) {
        var artist, _i, _len, _ref;
        _ref = nodes.slice(count, +nodes.lenght + 1 || 9e9);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          artist = _ref[_i];
          if (each.Source === artist.name) {
            return artist;
          }
        }
      };
      findTargetIndex = function(each, nodes, count) {
        var artist, _i, _len, _ref;
        _ref = nodes.slice(count, +nodes.lenght + 1 || 9e9);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          artist = _ref[_i];
          if (each.Target === artist.name) {
            return artist;
          }
        }
      };
      return drawLinks = function(edges) {
        var color, force1, link, my_links, node, nodeMap, svg;
        color = d3.scale.category20();
        force1 = d3.layout.force().charge(-120).linkDistance(30).size([960, 500]);

        /* Here we include the graph in the page */
        svg = d3.select('body').append('svg').attr('width', 960).attr('height', 500);

        /* format data */
        my_links = $.map(edges, function(d) {
          return {
            'source': d.source,
            'target': d.target,
            'value': d.weight,
            'origin': d
          };
        });
        nodeMap = {};
        nodes.forEach(function(x) {
          nodeMap[x.id] = x;
        });
        console.log(my_links);
        force1.nodes(nodes).links(my_links).start();
        link = svg.selectAll('.link').data(edges).enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
          return Math.sqrt(1);
        });
        node = svg.selectAll('.node').data(nodes).enter().append('circle').attr('class', 'node').attr('r', 5).style('fill', function(d) {
          return color((function() {
            switch (false) {
              case d.group !== 'Person':
                return 1;
              case d.group !== 'Location':
                return 2;
              case d.group !== 'Orgainzation':
                return 3;
              case d.group !== 'Date':
                return 4;
              default:
                return 5;
            }
          })());
        }).call(force.drag);
        console.log(node);
        force.on('tick', function() {
          link.attr('x1', function(d) {
            return d.source.x;
          }).attr('y1', function(d) {
            return d.source.y;
          }).attr('x2', function(d) {
            return d.target.x;
          }).attr('y2', function(d) {
            return d.target.y;
          });
          return node.attr('cx', function(d) {
            return d.x;
          }).attr('cy', function(d) {
            return d.y;
          });
        });
      };
    }
  });

}).call(this);
